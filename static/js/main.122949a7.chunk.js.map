{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","e","target","name","value","this","preventDefault","rando","Math","floor","random","length","randoImg","url","className","onSubmit","type","placeholder","onChange","src","alt","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAUeA,MARf,WACI,OACI,iCAEQ,kD,0CCqDDC,E,kDAxDX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,kCACXC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATV,E,gEAWO,IAAD,OAChBE,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CAAEV,YAAaQ,S,mCAGxBG,GAAI,IAAD,EACUA,EAAEC,OAAjBC,EADK,EACLA,KAAMC,EADD,EACCA,MACbC,KAAKL,SAAL,eAAiBG,EAAOC,M,mCAEfH,GAETA,EAAEK,iBACF,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC1DC,EAAWP,KAAKnB,MAAMI,YAAYiB,GAAOM,IACjDR,KAAKL,SAAS,CAACX,UAAWuB,M,+BAIxB,OACR,gCACI,uBAAME,UAAU,YAAWC,SAAUV,KAAKZ,aAA1C,UACA,uBAAOuB,KAAK,OACRb,KAAK,UACLc,YAAY,WACZb,MAAOC,KAAKnB,MAAMC,QAClB+B,SAAUb,KAAKd,eACnB,uBAAOyB,KAAK,OACRb,KAAK,aACLc,YAAY,cACZb,MAAOC,KAAKnB,MAAME,WAClB8B,SAAUb,KAAKd,eACf,kDAEJ,sBAAKuB,UAAU,OAAf,UACgB,qBAAKK,IAAKd,KAAKnB,MAAMG,UAAW+B,IAAI,KACpC,oBAAIN,UAAU,MAAd,SAAqBT,KAAKnB,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBT,KAAKnB,MAAME,uB,GAnD3BiC,IAAMC,WCanBC,MATf,WACE,OACE,sBAAKT,UAAU,MAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,QCEUU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.122949a7.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <header>\n           \n                <p>Meme Generator</p>\n        </header>\n    )\n}\nexport default Header","import React from 'react';\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            topText: '',\n            bottomText: '',\n            randomImg: '\"http://i.imgflip.com/1bij.jpg\"',\n            allMemeImgs: [],\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then(response => {\n            const {memes} = response.data;\n            this.setState({ allMemeImgs: memes })\n        })\n    }\n    handleChange(e) {\n        const {name, value} = e.target;\n        this.setState({ [name]: value })\n    }\n    handleSubmit(e) {\n        // e.preventDefault();\n        e.preventDefault()\n        const rando = Math.floor(Math.random() * this.state.allMemeImgs.length)\n        const randoImg = this.state.allMemeImgs[rando].url\n      this.setState({randomImg: randoImg})\n\n    }\n    render() {\n        return (\n<div>\n    <form className=\"meme-form\"onSubmit={this.handleSubmit} >\n    <input type=\"text\" \n        name=\"topText\" \n        placeholder=\"top Text\" \n        value={this.state.topText} \n        onChange={this.handleChange} />\n    <input type=\"text\" \n        name=\"bottomText\"  \n        placeholder=\"Bottom Text\" \n        value={this.state.bottomText} \n        onChange={this.handleChange} />\n        <button>Generate!</button>\n    </form>\n    <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n</div>\n        )\n    }\n}\nexport default MemeGenerator;","import './App.css';\n\nimport Header from './Header'\nimport MemeGenerator from './MemeGenerator'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Header />\n     <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}